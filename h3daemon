#!/bin/bash

# https://github.com/morgant/realpath
function realpath() {
    local success=true
    local path="$1"

    # make sure the string isn't empty as that implies something in further logic
    if [ -z "$path" ]; then
        success=false
    else
        # start with the file name (sans the trailing slash)
        path="${path%/}"

        # if we stripped off the trailing slash and were left with nothing, that means we're in the root directory
        if [ -z "$path" ]; then
            path="/"
        fi

        # get the basename of the file (ignoring '.' & '..', because they're really part of the path)
        local file_basename="${path##*/}"
        if [[ ("$file_basename" = ".") || ("$file_basename" = "..") ]]; then
            file_basename=""
        fi

        # extracts the directory component of the full path, if it's empty then assume '.' (the current working directory)
        local directory="${path%"$file_basename"}"
        if [ -z "$directory" ]; then
            directory='.'
        fi

        # attempt to change to the directory
        if ! cd "$directory" &>/dev/null; then
            success=false
        fi

        if $success; then
            # does the filename exist?
            if [[ (-n "$file_basename") && (! -e "$file_basename") ]]; then
                success=false
            fi

            # get the absolute path of the current directory & change back to previous directory
            local abs_path
            abs_path="$(pwd -P)"
            cd "-" &>/dev/null || exit 1

            # Append base filename to absolute path
            if [ "${abs_path}" = "/" ]; then
                abs_path="${abs_path}${file_basename}"
            else
                abs_path="${abs_path}/${file_basename}"
            fi

            # Remove last slash if not root directory
            if [ ${#abs_path} -ge 2 ]; then
                if [ "${abs_path: -1}" == "/" ]; then
                    echo "${abs_path::${#abs_path}-1}"
                else
                    echo "${abs_path}"
                fi
            else
                # output the absolute path
                echo "$abs_path"
            fi
        fi
    fi

    $success
}

function podman_version() {
    podman -v | cut -d' ' -f3-
}

function podman_version_major() {
    podman_version | cut -d'.' -f1
}

function health_status() {
    VERSION=$(podman_version_major)
    if ((VERSION < 4)); then
        podman inspect -f "{{.State.Healthcheck.Status}}" -t container h3daemon
    else
        podman inspect -f "{{.State.Health.Status}}" -t container h3daemon
    fi
}

function usage_help() {
    echo "h3daemon start|stop|help"
    echo "         start           HMMFILE [--logdir=LOGDIR] [--yes]"
    echo "         status"
    echo "         stop"
    echo "         help            [start|stop]"
}

function usage_help_start() {
    echo "h3daemon start HMMFILE [--logdir=LOGDIR]"
}

function usage_help_status() {
    echo "h3daemon status"
}

function usage_help_stop() {
    echo "h3daemon stop"
}

if [ $# == 0 ]; then
    usage_help
    exit 1
fi

function has_apt_get() {
    if type apt-get >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

function is_possibly_interactive() {
    [[ $- == *i* ]] && return 0
    shopt -q login_shell && return 0
    tty -s && return 0
    return 1
}

function ask_install() {
    while true; do
        read -r -p "$1 program not found. Do you wish to install it? " yn
        case $yn in
            [Yy]*)
                return 0
                break
                ;;
            [Nn]*) return 1 ;;
            *) echo "Please answer yes or no." ;;
        esac
    done
}

function check_podman() {
    YES="$1"

    SUDO=""
    if type sudo >/dev/null 2>&1; then
        SUDO="sudo"
    fi

    if ! type podman >/dev/null 2>&1; then

        if ! has_apt_get; then
            echo >&2 "Podman program not found!"
            exit 1
        fi
        if [ "$YES" == "true" ]; then
            $SUDO apt-get update
            $SUDO apt-get install podman --yes
        else

            if is_possibly_interactive; then
                if ask_install "Podman"; then
                    $SUDO apt-get update
                    $SUDO apt-get install podman --yes
                else
                    echo "Goodbye!"
                    exit 1
                fi
            else
                echo >&2 "Podman program not found!"
                exit 1
            fi
        fi
    fi

    if ! type podman >/dev/null 2>&1; then
        echo >&2 "Podman program not found!"
        exit 1
    fi
}

function exec_start() {
    if [ "$#" == "0" ]; then
        usage_help_start
        exit 1
    fi
    YES=false
    HMMFILE=$(realpath "$1")
    shift 1

    for i in "$@"; do
        case $i in
            --logdir=*)
                LOGDIR=$(realpath "${i#*=}")
                shift
                ;;
            -y | --yes)
                YES=true
                shift
                ;;
            *) ;;
        esac
    done

    if [ $# != 0 ]; then
        usage_help_start
        exit 1
    fi

    check_podman $YES

    if [ ! -f "$HMMFILE" ]; then
        echo >&2 "$HMMFILE file not found!"
        exit 1
    fi

    if [ -n "$LOGDIR" ]; then
        if [ ! -d "$LOGDIR" ]; then
            echo >&2 "$LOGDIR directory not found!"
            exit 1
        fi
    fi

    cmd="podman run -d -p 51371:51371"
    cmd="$cmd -v $HMMFILE:/app/data/"$(basename "$HMMFILE")

    if [ -n "$LOGDIR" ]; then
        cmd="$cmd -v $LOGDIR:/app/logs"
    fi

    image=quay.io/microbiome-informatics/h3daemon
    cmd="$cmd --health-cmd=/app/bin/check-health"
    cmd="$cmd --health-interval=10s --health-start-period=3s --health-timeout=2s"
    cmd="$cmd --name h3daemon"
    cmd="$cmd --rm $image $(basename "$HMMFILE")"

    $cmd >/dev/null || exit 1

    echo -n "Starting h3daemon..."
    sleep 0.1
    if ! podman container exists h3daemon >/dev/null 2>&1; then
        echo >&2 "Container h3daemon does not exist."
        kill_container
        echo " failed."
        exit 1
    fi

    podman inspect -f "{{.State.Runnings}}" -t container h3daemon >/dev/null 2>&1 || exit 1

    trials=0
    until [ "$(podman inspect -f "{{.State.Running}}" -t container h3daemon)" == "true" ]; do
        echo -n .
        trials=$((trials + 1))
        if [ "$trials" == "10" ]; then
            echo " failed."
            kill_container
            exit 1
        fi
        sleep 0.1
    done

    sleep 4
    until [ "$(health_status)" == "healthy" ]; do
        echo -n .
        trials=$((trials + 1))
        if [ "$trials" == "10" ]; then
            echo " failed."
            kill_container
            exit 1
        fi
        sleep 3
    done

    if ! podman container exists h3daemon >/dev/null 2>&1; then
        echo >&2 "Container h3daemon does not exist."
        kill_container
        echo " failed."
        exit 1
    fi
    echo " done."
    echo

    echo "██╗░░██╗██████╗░██████╗░░█████╗░███████╗███╗░░░███╗░█████╗░███╗░░██╗  ██╗░██████╗  ░█████╗░███╗░░██╗██╗"
    echo "██║░░██║╚════██╗██╔══██╗██╔══██╗██╔════╝████╗░████║██╔══██╗████╗░██║  ██║██╔════╝  ██╔══██╗████╗░██║██║"
    echo "███████║░█████╔╝██║░░██║███████║█████╗░░██╔████╔██║██║░░██║██╔██╗██║  ██║╚█████╗░  ██║░░██║██╔██╗██║██║"
    echo "██╔══██║░╚═══██╗██║░░██║██╔══██║██╔══╝░░██║╚██╔╝██║██║░░██║██║╚████║  ██║░╚═══██╗  ██║░░██║██║╚████║╚═╝"
    echo "██║░░██║██████╔╝██████╔╝██║░░██║███████╗██║░╚═╝░██║╚█████╔╝██║░╚███║  ██║██████╔╝  ╚█████╔╝██║░╚███║██╗"
    echo "╚═╝░░╚═╝╚═════╝░╚═════╝░╚═╝░░╚═╝╚══════╝╚═╝░░░░░╚═╝░╚════╝░╚═╝░░╚══╝  ╚═╝╚═════╝░  ░╚════╝░╚═╝░░╚══╝╚═╝"
}

function kill_container() {
    if podman container exists h3daemon; then
        podman kill --signal="SIGTERM" h3daemon >/dev/null 2>&1
    fi
    sleep 1
    if podman container exists h3daemon; then
        podman stop h3daemon --time 3 >/dev/null 2>&1
    fi
}

function exec_stop() {
    if [ $# != 0 ]; then
        usage_help_stop
        exit 1
    fi
    kill_container
}

function exec_status() {
    if [ $# != 0 ]; then
        usage_help_stop
        exit 1
    fi
    if podman container exists h3daemon; then
        STATUS=$(health_status)
        echo "$STATUS"
        if [ "$STATUS" == "healthy" ]; then
            exit 0
        else
            exit 1
        fi
    else
        echo "no such container exists"
        exit 1
    fi
}

if [ "$1" == "help" ]; then
    shift 1
    if [ "$#" == 0 ]; then
        usage_help
        exit 0
    elif [ "$#" == 1 ]; then
        if [ "$1" == "start" ]; then
            usage_help_start
            exit 0
        elif [ "$1" == "stop" ]; then
            usage_help_stop
            exit 0
        fi
        usage_help
        exit 1
    fi
    usage_help
    exit 1
elif [ "$1" == "start" ]; then
    shift 1
    exec_start "$@"
elif [ "$1" == "status" ]; then
    shift 1
    exec_status "$@"
elif [ "$1" == "stop" ]; then
    shift 1
    exec_stop "$@"
else
    usage_help
    exit 1
fi
